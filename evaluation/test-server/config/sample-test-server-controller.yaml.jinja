#
# @TODO: Warning, this is not a sufficient `.yaml` file for creating a
# replication controller for the pods. It is just a sample containing some
# ideas.
#
# The following files are used as a guide:
# - https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/guestbook/frontend-controller.yaml
# - http://kubernetes.io/docs/user-guide/production-pods/#liveness-and-readiness-probes-aka-health-checks
# - http://kubernetes.io/docs/user-guide/compute-resources/#how-pods-with-resource-limits-are-run
#
#

apiVersion: v1
kind: ReplicationController
metadata:
  name: test-server
spec:
  # The default number of replicas.
  replicas: 1
  template:
    metadata:
      labels:
        scaling-method: {{ autoscaling_method }}
        initialization_time: {{ pod_initialization_time }}
    spec:
      containers:
      - name: test-server
        image: mattjmcnaughton/test-server:{{ head_commit_hash }}
        # @TODO Update this with values that I think make sense.
        resources:
          requests:
            cpu: 500m
          limits:
            cpu: 500m
        readinessProbe:
          # If GET request to this endpoint returns true, then ready.
          httpGet:
            path: /ready
            port: 80
          # Idk if this method will work, but try to set a very long timeout so
          # that can control pod initialization time by just waiting to return
          # success from `/ready`. But there may be some max value for
          # `timeoutSeconds` so I may have to find a different way.
          initialDelaySeconds: 1
          # Set to 10 minutes (meaning that for now that is the longest possible
          # pod initialization time).
          timeoutSeconds: 600
        env:
        - name: SCALING_METHOD
          # Options are static-under-provision, static-over-provision,
          # static-average-provision, reactive, predictive
          value: {{ autoscaling_method }}
        - name: INITIALIZATION_TIME
          value: {{ pod_initialization_time }}
        # The following variables are all stored in `secret-config.json` and
        # should be kept secret - hence the `generated/` dir is not checked into
        # version control.
        - name: DATABASE_NAME:
          value: {{ database_name }}
        - name: DATABASE_ADDRESS:
          value: {{ database_address }}
        - name: DATABASE_USERNAME:
          value: {{ database_username }}
        - name: DATABASE_PASSWORD:
          value: {{ database_password }}
        ports:
        - containerPort: 80
